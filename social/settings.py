"""
Django settings for Orbit project.

Generated by 'django-admin startproject' using Django 1.11.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)

import datetime
import logging
import os

from decouple import config
from kombu import serialization

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

PROJECT_ROOT = os.path.abspath(os.path.dirname(__file__))

SITE_ROOT = os.path.dirname(os.path.realpath(__file__))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'n#d$(#nb*wp6ni33s5q9-lr@m3w@lqr4hm1ah@2(s*_0gqf7s^'
# jwt Auth Key
# SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']

# Application definition


INSTALLED_APPS = [
    'django.contrib.sessions',
    'corsheaders',  # CORS installation
    'user',
    'common'
]

MIDDLEWARE = [
    'common.middleware.LogsCreationsReqMiddleware',  # this line should be at starting to middleware classes
    'common.middleware.AuthenticationMiddleware',  # Auth tokens generates and checks
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'common.middleware.LogsCreationsResMiddleware',  # this line should be at end to middleware classes
]


REST_FRAMEWORK = {
    'UNAUTHENTICATED_USER': None,
}

SESSION_EXPIRE_SECONDS = 3600  # 1 hour

ROOT_URLCONF = 'social.urls'

LOCKDOWN_FORM = False

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'social.wsgi.application'


DATABASE_APPS_MAPPING = {'default': 'default',
                         'replica_1': 'replica_1'}

DATABASES = {
    'default': {
        'HOST': config('db_host'),
        'NAME': config('db_name'),
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'USER': config('db_user'),
        'PASSWORD': config('db_pass'),
        'OPTIONS': {
            # 'autocommit': True,
        },
    },
    'replica_1': {
        'HOST': config('replica_1_db_host'),
        'NAME': config('replica_1_db_name'),
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'USER': config('replica_1_db_user'),
        'PASSWORD': config('replica_1_db_pass'),
        'OPTIONS': {
            # 'autocommit': True,
        },
    }
}

DATABASE_ROUTERS = ['social.database.CustomRouter']


AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

STATIC_URL = '/static/'

# AWS
# AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID')
# AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY')
# AWS_STORAGE_BUCKET_NAME = config('AWS_STORAGE_BUCKET_NAME')
# AWS_STORAGE_FOLDER = config('AWS_STORAGE_FOLDER')
# AWS_REGION = config('AWS_REGION')
# AWS_S3_CUSTOM_DOMAIN = config('AWS_S3_CUSTOM_DOMAIN').format(AWS_REGION, AWS_STORAGE_BUCKET_NAME)
# AWS_S3_UPLOAD_URL = config('AWS_REGION_URL').format(AWS_REGION)
# AWS_LOCATION = config('AWS_LOCATION')
# STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
# DEFAULT_FILE_STORAGE = 'userValidation.storage_backends.MediaStorage'
# MEDIA_ROOT = "Media"
# TEMP_DIR = 'media/temp/'

# Email
# EMAIL_BACKEND = 'sgbackend.SendGridBackend'
# EMAIL_HOST = config('SERVICE_MAIL_HOST')
# EMAIL_PORT = config('SERVICE_MAIL_PORT')
# EMAIL_HOST_USER = config('SERVICE_MAIL')
# EMAIL_HOST_PASSWORD = config('SERVICE_MAIL_PASS')
# EMAIL_USE_TLS = True
# SENDGRID_API_KEY = config('SENDGRID_API_KEY')

# log
Format = '[%(levelname)s]  \t[%(asctime)s] \t[  %(message)s  ]'
logging.basicConfig(level=logging.DEBUG, format=Format)
logger = logging.getLogger()

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'standard': {
            'format': '[%(levelname)s]  \t[%(asctime)s] \t[  %(message)s  ]'
        },
    },
    'handlers': {
        'default': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR + '/logs/log_' + str(datetime.date.today()) + '.log',
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 100,
            'formatter': 'standard',
        },
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['default'],
            'level': 'WARNING',
            'propagate': False
        },
        'django.server': {
            'handlers': ['default'],
            'level': 'DEBUG',
            'propagate': False
        },
        'django.request': {
            'handlers': ['default'],
            'level': 'INFO',
            'propagate': False
        },
    },
    'root': {
        'handlers': ['default'],
        'level': 'DEBUG'
    },
    'color': {
        '()': 'colorlog.ColoredFormatter',
        'format': '%(log_color)s%(levelname)-8s %(message)s',
        'log_colors': {
            'DEBUG': 'bold_black',
            'INFO': 'white',
            'WARNING': 'yellow',
            'ERROR': 'red',
            'CRITICAL': 'bold_red',
        },
    }
}

# Template settings
# TEMPLATE_DEBUG = DEBUG
# TEMPLATE_DIRS = (
#     os.path.join(PROJECT_ROOT, 'templates').replace('\\', '/'),
# )
# List of callables that know how to import templates from various sources.
# TEMPLATE_LOADERS = ()

# Celery Initialization
# CELERY_BROKER_URL = 'amqp://localhost'
CELERY_BROKER_URL = 'amqp://guest:guest@localhost:5672//'
BROKER_URL = 'amqp://guest:guest@localhost//'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_TASK_PROTOCOL = 1
CELERY_RESULT_SERIALIZER = 'json'
serialization.registry._decoders.pop("application/x-python-serialize")

# CORS Issue resolve
APP_NAME = 'social'

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = False

CORS_ORIGIN_WHITELIST = []

CORS_ALLOW_METHODS = (
    'GET',
    'POST',
    'PUT',
    'PATCH',
    'DELETE',
    'OPTIONS'
)

CORS_ALLOW_HEADERS = (
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'sessionid'
)

CORS_URLS_REGEX = r'^/api/.*$'
# USE_TZ = False
